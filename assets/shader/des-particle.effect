CCEffect %{
  temporaries:
    b1: &b1
      targets:
      - blend: true
        blendSrc: src_alpha
        blendDst: one
        blendSrcAlpha: src_alpha
        blendDstAlpha: one
    b2: &b2
      targets:
      - blend: true
        blendSrc: src_alpha
        blendDst: one_minus_src_alpha
        blendSrcAlpha: zero
        blendDstAlpha: one
    b3: &b3
      targets:
      - blend: true
        blendSrc: dst_color
        blendDst: one
        blendSrcAlpha: zero
        blendDstAlpha: dst_alpha
    d1: &d1 { depthTest: true, depthWrite: false }
    r1: &r1 { cullMode: none }
    p1: &p1
        tintColor:            { value: [1, 1, 1, 1], linear: true, editor: { type: color } }
        mainTexture:          { value: white }
        mainAddIntensity:     { value: 0 }
        mainPannerX:          { value: 0 }
        mainPannerY:          { value: 0 }
        maskTexture:          { value: white }
        maskPannerX:          { value: 0 }
        maskPannerY:          { value: 0 }
        intensity:            { value: 1 }
        noiseTexture:         { value: white }
        noiseIntensity:       { value: 0 }
        noisePannerX:         { value: 0 }
        noisePannerY:         { value: 0 }
        magicVec3:            { value: [0.300000012, 0.589999974, 0.109999999, 1] }

  techniques:
  - name: add
    passes:
    - vert: particle-vs-legacy:lpvs_main
      frag: tinted-fs:add
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b1
      properties: *p1
  - name: alpha-blend
    passes:
    - vert: particle-vs-legacy:lpvs_main
      frag: tinted-fs:add
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b2
      properties: *p1
  - name: add-multiply
    passes:
    - vert: particle-vs-legacy:lpvs_main
      frag: tinted-fs:multiply
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b3
      properties: *p1
}%

// TODO: soft particle

CCProgram tinted-fs %{
  precision mediump float;
  #include <output>

  in vec2 uv;
  in vec4 color;

  uniform sampler2D mainTexture;
  uniform sampler2D maskTexture;
  uniform sampler2D noiseTexture;

  uniform XConstants {
    vec4 tintColor;
    vec4 magicVec3;
    float mainPannerX;
    float mainPannerY;
    float thresold;
    float intensity;
    float noiseIntensity;
    float noisePannerX;
    float noisePannerY;
    float maskPannerX;
    float maskPannerY;
    float mainAddIntensity;
  };

  vec4 add () {

    vec2 maskPan = cc_time.xx * vec2(maskPannerX, maskPannerY) + uv;
    vec4 mask = texture(maskTexture, maskPan);

    vec2 noisePan = cc_time.xx * vec2(noisePannerX, noisePannerY) + uv;
    vec4 noise = texture(noiseTexture, noisePan);

    float u_xlat6 = uv.y * noiseIntensity;
    float mainX = dot(noise.rgb, magicVec3.xyz);
    vec2 mainPan = vec2(mainX, mainX) * vec2(u_xlat6, u_xlat6) + uv;
    mainPan += cc_time.xx * vec2(mainPannerX, mainPannerY);

    vec4 img = texture(mainTexture, mainPan);

    float u_xlat2x = dot(mask.rgb, magicVec3.xyz);
    u_xlat2x = mask.r * u_xlat2x;
    float u_xlat4x = img.a * tintColor.a;
    u_xlat4x *= u_xlat2x;

    float u_xlat0_d = tintColor.a + tintColor.a;
    u_xlat0_d -= 1.0;
    u_xlat0_d = clamp(u_xlat0_d, 0.0, 1.0);
    u_xlat0_d = img.a * u_xlat0_d;

    u_xlat0_d = ((u_xlat0_d * u_xlat2x) + (-u_xlat4x));
    u_xlat0_d = u_xlat0_d + u_xlat4x;

    img.rgba *= tintColor.rgba;
    img.rgb *= vec3(intensity, intensity, intensity);
    //img.rgb *= vec3(u_xlat0_d, u_xlat0_d, u_xlat0_d);
    img.a *= noise.a * mask.r;

    img.rgba += img.rgba * vec4(mainAddIntensity, mainAddIntensity, mainAddIntensity, mainAddIntensity);
      
    return CCFragOutput(img);
  }

  vec4 multiply () {
    vec2 maskPan = cc_time.xx * vec2(maskPannerX, maskPannerY) + uv;
    vec4 mask = texture(maskTexture, maskPan);

    vec2 noisePan = cc_time.xx * vec2(noisePannerX, noisePannerY) + uv;
    vec4 noise = texture(noiseTexture, noisePan);

    float u_xlat6 = uv.y * noiseIntensity;
    float mainX = dot(noise.rgb, magicVec3.xyz);
    vec2 mainPan = vec2(mainX, mainX) * vec2(u_xlat6, u_xlat6) + uv;
    mainPan += cc_time.xx * vec2(mainPannerX, mainPannerY);

    vec4 img = texture(mainTexture, mainPan);

    float u_xlat2x = dot(mask.rgb, magicVec3.xyz);
    u_xlat2x = mask.r * u_xlat2x;
    float u_xlat4x = img.a * tintColor.a;
    u_xlat4x *= u_xlat2x;

    float u_xlat0_d = tintColor.a + tintColor.a;
    u_xlat0_d -= 1.0;
    u_xlat0_d = clamp(u_xlat0_d, 0.0, 1.0);
    u_xlat0_d = img.a * u_xlat0_d;

    u_xlat0_d = ((u_xlat0_d * u_xlat2x) + (-u_xlat4x));
    u_xlat0_d = u_xlat0_d + u_xlat4x;

    img.rgba *= tintColor.rgba;
    img.rgb *= vec3(intensity, intensity, intensity);
    //img.rgb *= vec3(u_xlat0_d, u_xlat0_d, u_xlat0_d);
    img.a *= noise.a * mask.r;

    img.rgba += img.rgba * vec4(mainAddIntensity, mainAddIntensity, mainAddIntensity, mainAddIntensity);

    return CCFragOutput(img);
  }
}%

CCProgram no-tint-fs %{
  precision mediump float;
  #include <output>

  in vec2 uv;
  in vec4 color;

  uniform sampler2D mainTexture;
  uniform sampler2D maskTexture;

  vec4 addSmooth () {
    vec4 col = color * texture(mainTexture, uv);
    col.rgb *= col.a;

    vec4 mask = texture(maskTexture, uv);
    col.a *= mask.r;

    return CCFragOutput(col);
  }

  vec4 premultiplied () {
    vec4 col = color * texture(mainTexture, uv) * color.a;

    vec4 mask = texture(maskTexture, uv);
    col.a *= mask.r;

    return CCFragOutput(col);
  }
}%
